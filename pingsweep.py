#!/usr/bin/python

import sys
import platform
import subprocess
import ipaddress

argc = len(sys.argv)
# Get the command line arguments as a dictionary
args_dict = {arg : position for position, arg in enumerate(sys.argv)}


help_message = """
Usage: pingsweep.py [OPTIONS] [IP Adresses]

Options:
    -L                  Use a list of IPs instead of a mask. This should always be the last option
    -o <file>           Output to file. If the file exists, it is overwritten
Examples:
    pingsweep.py 192.168.0.0/24 
    pingsweep.py -L 192.168.0.1, 127.0.0.5
"""


count_param = '-c'
active_children = {}
output_to_file = False
output_file = None

def get_bit_masks():
        
    bit_masks = {mask : 2**mask for mask in range(0,33)}
    for i in range(31, -1, -1):
        bit_masks[i] += bit_masks[i + 1]
    
    return bit_masks

def valid_mask(mask):
    return mask >= 0 and mask <= 32 

def valid_ip(ip):

    ip_bytes = ip.split('.')
    
    if  len(ip_bytes) != 4 \
        or int(ip_bytes[0]) not in range(0,256) \
        or int(ip_bytes[1]) not in range(0,256) \
        or int(ip_bytes[2]) not in range(0,256) \
        or int(ip_bytes[3]) not in range(0,256):
            return False

    return True

def check_subnet_input():
    split = sys.argv[-1].split('/') 
    if  len(split) != 2 \
        or not valid_ip(split[0]) \
        or not valid_mask(int(split[1])):
            return False

    return True

def get_ips():

    ips = []

    if '-L' in args_dict:
        first_ip_index = args_dict['-L'] + 1
        if argc-1 < first_ip_index:
            stop()

        for i in range (first_ip_index, argc):
            ip = sys.argv[i]
            ip = ip.strip(', ')

            if not valid_ip(ip):
                error("Invalid IP in list")
                stop()
            else:
                ips.append(ip)
    else:
        
        if not check_subnet_input():
            error("Invalid subnet")
            stop()
        
        # Setup bit masks for subnetting
        subnet = sys.argv[-1]
        for ip in ipaddress.ip_network(subnet).hosts():
            ips.append(str(ip))

    return ips
            

def check_windows():
    global count_param, windows
    os = platform.system()
    if os.lower() == 'windows':
        
        count_param = '-n'

def check_output():
    global output_file

    if argc < 4:
        error("Missing output file name")
        stop()
    filename_idx = args_dict['-o'] + 1

    if not filename_idx < argc:
        error("Wrong order of arguments")
        stop()

    output_file = open(sys.argv[filename_idx], 'w')
    

def error(message):
    print(f"ERROR: {message}")


def stop():
    print(help_message)
    quit(-1)

def send_pings(ips):

    for host in ips:
        active_children[host] = subprocess.Popen(['ping', count_param, '1', host], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def get_active_hosts():
    global output_file
    while active_children:

        remove = []
        for ip, process in active_children.items():

            if process.poll() is not None:
                remove.append(ip)
                if process.returncode == 0:
                    if output_to_file:
                        output_file.write(ip + '\n')
                    else:
                        print(ip)
        
        for ip in remove:
            del active_children[ip]
                    

if argc < 2:
    stop()
    
if '-o' in args_dict:
    check_output()  
    output_to_file = True
    

# Set names of parameters for windows
check_windows()

# Get list of IPs
ips = get_ips()

send_pings(ips)
get_active_hosts()

    